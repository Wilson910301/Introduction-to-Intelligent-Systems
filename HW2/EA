import numpy as np 
import matplotlib.pyplot as plt 
 
# --- 參數設定 --- 
fitness_mode = 'linear'  # 'power_law' or 'linear' 
reproduction_mode = 'TS'  # 'RWS' or 'TS' 
crossover_mode = 'convex'  # 'average' or 'convex' 
 
# --- 目標函數設定 --- 
x_vals = np.arange(-10, 10.1, 0.1) 
y_vals = -15 * (np.sin(2 * x_vals))**2 - (x_vals - 2)**2 + 160 
max_idx = np.argmax(y_vals) 
max_x = x_vals[max_idx] 
fit_terminate_condition = y_vals[max_idx] 
 
if fitness_mode == 'power_law': 
    fit_terminate_condition **= 5 
else: 
    fit_terminate_condition = 100000 * fit_terminate_condition + 5 
 
# --- 初始族群 --- 
population = 10 
x_all = np.random.randint(-100, 101, population) * 0.1 
 
# --- 主演算法迴圈 --- 
max_fitness = [] 
max_x_estimated = 0 
 
for generation in range(1, 101): 
    # 計算適應度 
    fitness = -15 * (np.sin(2 * x_all))**2 - (x_all - 2)**2 + 160 
    if fitness_mode == 'power_law': 
        fitness = fitness**5 
    else: 
        fitness = 100000 * fitness + 5 
 
    max_fitness.append(np.max(fitness)) 
 
    if np.max(fitness) >= fit_terminate_condition: 
        max_x_estimated = x_all[np.argmax(fitness)] 
        break 
 
    # reproduction 
    if reproduction_mode == 'RWS': 
        probs = fitness / np.sum(fitness) 
        selected_indices = np.searchsorted(np.cumsum(probs), 
np.random.rand(population)) 
    else:  # TS 
        selected_indices = [] 
        for _ in range(population): 
            candidates = np.random.choice(population, 2, 
replace=False) 
            best = candidates[np.argmax(fitness[candidates])] 
            selected_indices.append(best) 
    x_selected = x_all[selected_indices] 
 
    # crossover 
    x_crossovered = np.copy(x_selected) 
    if crossover_mode == 'average': 
        for i in range(8): 
            pair = np.random.choice(population, 2, replace=False) 
            x_crossovered[i] = 0.5 * (x_selected[pair[0]] + 
x_selected[pair[1]]) 
            while not (-10 <= x_crossovered[i] <= 10): 
                pair = np.random.choice(population, 2, 
replace=False) 
                x_crossovered[i] = 0.5 * (x_selected[pair[0]] + 
x_selected[pair[1]]) 
    elif crossover_mode == 'convex': 
        for i in range(8): 
            pair = np.random.choice(population, 2, replace=False) 
            r = np.random.randint(0, 11) * 0.1 
            x_crossovered[i] = r * x_selected[pair[0]] + (1 - r) * 
x_selected[pair[1]] 
            while not (-10 <= x_crossovered[i] <= 10): 
                pair = np.random.choice(population, 2, 
replace=False) 
                r = np.random.randint(0, 11) * 0.1 
                x_crossovered[i] = r * x_selected[pair[0]] + (1 - 
r) * x_selected[pair[1]] 
 
    # mutation 
    x_mutationed = np.copy(x_crossovered) 
    r = np.random.randint(0, 11) * 0.1 
    noise = np.random.randint(-10, 11, population) * 0.1 
    x_mutationed += r * noise 
 
    while np.any(x_mutationed > 10) or np.any(x_mutationed < -10): 
        x_mutationed = np.copy(x_crossovered) 
        r = np.random.randint(0, 11) * 0.1 
        noise = np.random.randint(-10, 11, population) * 0.1 
        x_mutationed += r * noise 
 
    # new generation 
    x_all = np.copy(x_mutationed) 
 
# --- 結果繪圖 --- 
plt.figure() 
plt.plot(range(1, generation + 1), max_fitness) 
if max_x_estimated == 0: 
    plt.title(f'EA generation: {generation}') 
else: 
    plt.title(f'EA generation: {generation}, 
x={max_x_estimated:.4f}') 
plt.xlabel('Generation') 
plt.ylabel('Max Fitness') 
plt.grid(True) 
plt.show() 
