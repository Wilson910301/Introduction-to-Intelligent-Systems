import numpy as np
import matplotlib.pyplot as plt

#############################################################################
# (1) Membership Functions
#############################################################################
def x_L(x):
    """ x is Low if -4 <= x <= 0 """
    if x >= -4 and x <= 0:
        slope = -1.0/4.0
        return 1.0 + slope * abs(x + 4.0)
    else:
        return 0.0

def x_M(x):
    """
    x is Medium if:
      -3 <= x <= 0 (左半, slope= +1/3)
       0 <= x <= 3 (右半, slope= -1/3)
    """
    if x >= -3 and x <= 0:
        slope = 1.0/3.0
        return slope * abs(x + 3.0)
    elif x >= 0 and x <= 3:
        slope = -1.0/3.0
        return 1.0 + slope * abs(x)
    else:
        return 0.0

def x_H(x):
    """ x is High if 0 <= x <= 4 """
    if x >= 0 and x <= 4:
        slope = 1.0/4.0
        return slope * abs(x)
    else:
        return 0.0

def y_L(y):
    """ y is Light if 0 <= y <= 1 """
    if y >= 0 and y <= 1:
        slope = -1.0
        return 1.0 + slope*abs(y)
    else:
        return 0.0

def y_M(y):
    """ y is Medium if 0 <= y <= 1 (左半) or 1 <= y <= 2 (右半) """
    if y >= 0 and y <= 1:
        slope = 1.0
        return slope*abs(y)
    elif y >= 1 and y <= 2:
        slope = -1.0
        return 1.0 + slope*abs(y - 1.0)
    else:
        return 0.0

def y_H(y):
    """ y is Heavy if 1 <= y <= 2 """
    if y >= 1 and y <= 2:
        slope = 1.0
        return slope*abs(y - 1.0)
    else:
        return 0.0

def z_S(z):
    """ z is Short if 0 <= z <= 5 """
    if z >= 0 and z <= 5:
        slope = -0.2
        return 1.0 + slope*abs(z)
    else:
        return 0.0

def z_M(z):
    """
    z is Medium if:
       0 <= z <= 5  (左半, slope=+0.2)
       5 <= z <= 10 (右半, slope=-0.2)
    """
    if z >= 0 and z <= 5:
        slope = 0.2
        return slope*abs(z)
    elif z >= 5 and z <= 10:
        slope = -0.2
        return 1.0 + slope*abs(z - 5.0)
    else:
        return 0.0

def z_L(z):
    """ z is Long if 5 <= z <= 10 """
    if z >= 5 and z <= 10:
        slope = 0.2
        return slope*abs(z - 5.0)
    else:
        return 0.0

def w_L(w):
    """ w is Low if 600 <= w <= 800 """
    if w >= 600 and w <= 800:
        slope = -0.005
        return 1.0 + slope*abs(w - 600.0)
    else:
        return 0.0

def w_M(w):
    """
    w is Medium if:
       600 <= w <= 900  (左半, slope=+1/300)
       900 <= w <=1200  (右半, slope=-1/300)
    """
    if w >= 600 and w <= 900:
        slope = 1.0/300.0
        return slope*abs(w - 600.0)
    elif w >= 900 and w <= 1200:
        slope = -1.0/300.0
        return 1.0 + slope*abs(w - 900.0)
    else:
        return 0.0

def w_H(w):
    """ w is High if 1000 <= w <= 1200 """
    if w >= 1000 and w <= 1200:
        slope = 0.005
        return slope*abs(w - 1000.0)
    else:
        return 0.0

#############################################################################
# (2) 建立 x, y 並計算 membership
#############################################################################
# 為了對齊 MATLAB 的 :0.1: 寫法，這裡改用 linspace 指定總點數
# -4:0.1:4  => 一共 81 點
x = np.linspace(-4, 4, 81)
#  0:0.1:2  => 一共 21 點
y = np.linspace(0, 2, 21)

x_size = len(x)  # 81
y_size = len(y)  # 21

x_low    = np.array([x_L(val) for val in x])
x_medium = np.array([x_M(val) for val in x])
x_high   = np.array([x_H(val) for val in x])

y_light   = np.array([y_L(val) for val in y])
y_medium_ = np.array([y_M(val) for val in y])  # 避免跟 var "y_medium" 同名
y_heavy   = np.array([y_H(val) for val in y])

#############################################################################
# (3) 根據規則 (x, y, z, w) => alpha_zw = min(alpha_x, alpha_y)
#############################################################################
rules = [
    'LHLH',
    'LMMH',
    'LLSH',
    'MHLM',
    'MMMM',
    'MLSM',
    'HHLL',
    'HMML',
    'HLSL'
]
alpha_zw_list = []

for rule in rules:
    # 第1碼 => x(L/M/H)
    if rule[0] == 'L':
        alpha_x = x_low
    elif rule[0] == 'M':
        alpha_x = x_medium
    elif rule[0] == 'H':
        alpha_x = x_high
    else:
        raise ValueError("未知 x rule")

    # 第2碼 => y(L/M/H)
    if rule[1] == 'L':
        alpha_y = y_light
    elif rule[1] == 'M':
        alpha_y = y_medium_
    elif rule[1] == 'H':
        alpha_y = y_heavy
    else:
        raise ValueError("未知 y rule")

    AX, AY = np.meshgrid(alpha_x, alpha_y)  # shape=(21,81)
    alpha_block = np.minimum(AX, AY)        # (21,81)
    alpha_zw_list.append(alpha_block)

# 總合併 => shape=(21, 81*9)= (21,729)
alpha_zw = np.concatenate(alpha_zw_list, axis=1)

#############################################################################
# (4) 找出 z 的 alpha_max (短/中/長)
#############################################################################
z_alpha_max_short  = np.zeros((y_size, x_size))
z_alpha_max_medium = np.zeros((y_size, x_size))
z_alpha_max_long   = np.zeros((y_size, x_size))

for i, rule in enumerate(rules):
    col_start = i * x_size
    col_end   = (i+1) * x_size
    alpha_block = alpha_zw[:, col_start:col_end]
    
    # 第3碼 => z(S/M/L)
    if   rule[2] == 'S':
        z_alpha_max_short  = np.maximum(z_alpha_max_short,  alpha_block)
    elif rule[2] == 'M':
        z_alpha_max_medium = np.maximum(z_alpha_max_medium, alpha_block)
    elif rule[2] == 'L':
        z_alpha_max_long   = np.maximum(z_alpha_max_long,   alpha_block)
    else:
        print("z label error")

#############################################################################
# (5) 對 z 做 COG / MOM / mMOM / CA
#############################################################################
z_y_star_COG  = np.zeros((y_size, x_size))
z_y_star_MOM  = np.zeros((y_size, x_size))
z_y_star_mMOM = np.zeros((y_size, x_size))
z_y_star_CA   = np.zeros((y_size, x_size))

# 為了再現 0:0.1:5、5:0.1:10 => 共 51點 + 51點 - 1 => 101點
z_left  = np.linspace(0, 5, 51)
z_right = np.linspace(5,10, 51)

for irow in range(y_size):
    for jcol in range(x_size):
        # membership
        short_vals_left = np.array([z_S(val) for val in z_left])
        med_vals_left   = np.array([z_M(val) for val in z_left])
        med_vals_right  = np.array([z_M(val) for val in z_right])
        long_vals_right = np.array([z_L(val) for val in z_right])

        # cut
        alpha_s = z_alpha_max_short[irow,jcol]
        alpha_m = z_alpha_max_medium[irow,jcol]
        alpha_l = z_alpha_max_long[irow,jcol]

        short_vals_left[short_vals_left> alpha_s] = alpha_s
        med_vals_left[med_vals_left> alpha_m]     = alpha_m
        med_vals_right[med_vals_right> alpha_m]   = alpha_m
        long_vals_right[long_vals_right> alpha_l] = alpha_l

        # CA
        short_max  = np.max(short_vals_left)
        idx_s      = np.where(short_vals_left==short_max)[0]
        z_candidates_s = z_left[idx_s] if len(idx_s)>0 else np.array([0.0])
        CA_z_short = np.median(z_candidates_s)

        medium_max = np.max(med_vals_left)
        CA_z_medium= z_left[-1]  # => 5  (跟 MATLAB 相同)

        long_max   = np.max(long_vals_right)
        idx_l      = np.where(long_vals_right==long_max)[0]
        z_candidates_l = z_right[idx_l] if len(idx_l)>0 else np.array([10.0])
        CA_z_long  = np.median(z_candidates_l)

        denom = short_max + medium_max + long_max
        if denom == 0:
            z_y_star_CA[irow,jcol] = 0.0
        else:
            z_y_star_CA[irow,jcol] = (
                short_max*CA_z_short
                + medium_max*CA_z_medium
                + long_max*CA_z_long
            ) / denom

        # Combine membership => COG / MOM / mMOM
        # boundary
        alpha_0to5 = np.maximum(short_vals_left, med_vals_left)
        boundary_5_val = max(alpha_0to5[-1], med_vals_right[0])
        alpha_0to5[-1]      = boundary_5_val
        med_vals_right[0]   = boundary_5_val

        alpha_5to10 = np.maximum(med_vals_right, long_vals_right)
        alpha_5to10[0] = boundary_5_val

        alpha_0to10 = np.concatenate([alpha_0to5, alpha_5to10[1:]], axis=0)
        z_universe  = np.concatenate([z_left,     z_right[1:]], axis=0)

        sum_val = np.sum(alpha_0to10)
        if sum_val == 0:
            z_y_star_COG[irow,jcol] = 0.0
        else:
            z_y_star_COG[irow,jcol] = np.sum(z_universe * alpha_0to10) / sum_val

        mom_max = np.max(alpha_0to10)
        idx_mom = np.where(alpha_0to10 == mom_max)[0]
        if len(idx_mom)==0:
            z_y_star_MOM[irow,jcol]  = 0.0
            z_y_star_mMOM[irow,jcol] = 0.0
        else:
            z_y_star_MOM[irow,jcol]  = np.mean(z_universe[idx_mom])
            z_y_star_mMOM[irow,jcol] = 0.5*(z_universe[idx_mom[0]] + z_universe[idx_mom[-1]])

#############################################################################
# (6) w 的三種 (short, medium, long)
#############################################################################
w_alpha_max_short  = np.zeros((y_size, x_size))
w_alpha_max_medium = np.zeros((y_size, x_size))
w_alpha_max_long   = np.zeros((y_size, x_size))

for i, rule in enumerate(rules):
    col_start = i*x_size
    col_end   = (i+1)*x_size
    alpha_block = alpha_zw[:, col_start:col_end]

    # 第4碼 => w(L/M/H)
    if   rule[3] == 'L':
        w_alpha_max_short  = np.maximum(w_alpha_max_short, alpha_block)
    elif rule[3] == 'M':
        w_alpha_max_medium = np.maximum(w_alpha_max_medium, alpha_block)
    elif rule[3] == 'H':
        w_alpha_max_long   = np.maximum(w_alpha_max_long, alpha_block)
    else:
        print("w label error")

#############################################################################
# (7) w 的 COG / MOM / mMOM / CA
#############################################################################
w_y_star_COG  = np.zeros((y_size, x_size))
w_y_star_MOM  = np.zeros((y_size, x_size))
w_y_star_mMOM = np.zeros((y_size, x_size))
w_y_star_CA   = np.zeros((y_size, x_size))

# 600:1:900 => 301點, 900:1:1200 => 301點
w_left  = np.linspace(600, 900, 301)
w_right = np.linspace(900,1200, 301)

for irow in range(y_size):
    for jcol in range(x_size):

        w_low_left  = np.array([w_L(v) for v in w_left])
        w_med_left  = np.array([w_M(v) for v in w_left])
        w_med_right = np.array([w_M(v) for v in w_right])
        w_high_right= np.array([w_H(v) for v in w_right])

        alpha_s = w_alpha_max_short[irow,jcol]
        alpha_m = w_alpha_max_medium[irow,jcol]
        alpha_l = w_alpha_max_long[irow,jcol]

        w_low_left[w_low_left>alpha_s]     = alpha_s
        w_med_left[w_med_left>alpha_m]     = alpha_m
        w_med_right[w_med_right>alpha_m]   = alpha_m
        w_high_right[w_high_right>alpha_l] = alpha_l

        # CA
        w_short_max = np.max(w_low_left)
        idx_s       = np.where(w_low_left == w_short_max)[0]
        # MATLAB: 600:800 => 201點
        short_range = np.arange(600,801,1)  # (600..800)
        # idx_s若超出 201，就砍掉
        idx_s = idx_s[idx_s < len(short_range)]
        CA_w_short = np.median(short_range[idx_s]) if len(idx_s)>0 else 600.0

        w_medium_max = np.max(w_med_left)
        CA_w_medium  = 900.0

        w_long_max   = np.max(w_high_right)
        idx_l        = np.where(w_high_right == w_long_max)[0]
        # MATLAB: 1000:1200 => 201點
        long_range = np.arange(1000,1201,1) # (1000..1200)
        # w_right= 900..1200 => 第0個是900 => offset= 100 => 900+100=1000
        idx_l2 = idx_l - 100
        idx_l2 = idx_l2[(idx_l2>=0) & (idx_l2<len(long_range))]
        CA_w_long = np.median(long_range[idx_l2]) if len(idx_l2)>0 else 1200.0

        denom = w_short_max + w_medium_max + w_long_max
        if denom == 0:
            w_y_star_CA[irow,jcol] = 600.0
        else:
            w_y_star_CA[irow,jcol] = (
                w_short_max*CA_w_short
                + w_medium_max*CA_w_medium
                + w_long_max*CA_w_long
            ) / denom

        # Combine => COG / MOM / mMOM
        alpha_600to900 = np.maximum(w_low_left, w_med_left)
        boundary_900_val = max(alpha_600to900[-1], w_med_right[0])
        alpha_600to900[-1] = boundary_900_val
        w_med_right[0]     = boundary_900_val

        alpha_900to1200 = np.maximum(w_med_right, w_high_right)
        alpha_900to1200[0] = boundary_900_val

        alpha_600to1200 = np.concatenate([alpha_600to900, alpha_900to1200[1:]])
        w_universe = np.arange(600,1201,1)  # 600..1200 => 601點

        sum_alpha = np.sum(alpha_600to1200)
        if sum_alpha == 0:
            w_y_star_COG[irow,jcol] = 600.0
        else:
            w_y_star_COG[irow,jcol] = np.sum(w_universe*alpha_600to1200)/sum_alpha

        mom_max = np.max(alpha_600to1200)
        idx_mom = np.where(alpha_600to1200==mom_max)[0]
        if len(idx_mom) == 0:
            w_y_star_MOM[irow,jcol]  = 600.0
            w_y_star_mMOM[irow,jcol] = 600.0
        else:
            w_y_star_MOM[irow,jcol]  = np.mean(w_universe[idx_mom])
            w_y_star_mMOM[irow,jcol] = 0.5*( w_universe[idx_mom[0]] + w_universe[idx_mom[-1]] )

#############################################################################
# (8) 繪圖 (z 的4張 + w 的4張)
#############################################################################
# 在 Python: X, Y = np.meshgrid(x, y) => shape=(21,81)
X, Y = np.meshgrid(x, y)

fig1 = plt.figure()
ax1 = fig1.add_subplot(111, projection='3d')
ax1.plot_surface(X, Y, z_y_star_COG, cmap='viridis')
ax1.set_title('COG of z')
ax1.set_xlabel('x')
ax1.set_ylabel('y')
ax1.set_zlabel('z_COG')

fig2 = plt.figure()
ax2 = fig2.add_subplot(111, projection='3d')
ax2.plot_surface(X, Y, z_y_star_MOM, cmap='viridis')
ax2.set_title('MOM of z')
ax2.set_xlabel('x')
ax2.set_ylabel('y')
ax2.set_zlabel('z_MOM')

fig3 = plt.figure()
ax3 = fig3.add_subplot(111, projection='3d')
ax3.plot_surface(X, Y, z_y_star_mMOM, cmap='viridis')
ax3.set_title('mMOM of z')
ax3.set_xlabel('x')
ax3.set_ylabel('y')
ax3.set_zlabel('z_mMOM')

fig4 = plt.figure()
ax4 = fig4.add_subplot(111, projection='3d')
ax4.plot_surface(X, Y, z_y_star_CA, cmap='viridis')
ax4.set_title('CA of z')
ax4.set_xlabel('x')
ax4.set_ylabel('y')
ax4.set_zlabel('z_CA')

fig5 = plt.figure()
ax5 = fig5.add_subplot(111, projection='3d')
ax5.plot_surface(X, Y, w_y_star_COG, cmap='viridis')
ax5.set_title('COG of w')
ax5.set_xlabel('x')
ax5.set_ylabel('y')
ax5.set_zlabel('w_COG')

fig6 = plt.figure()
ax6 = fig6.add_subplot(111, projection='3d')
ax6.plot_surface(X, Y, w_y_star_MOM, cmap='viridis')
ax6.set_title('MOM of w')
ax6.set_xlabel('x')
ax6.set_ylabel('y')
ax6.set_zlabel('w_MOM')

fig7 = plt.figure()
ax7 = fig7.add_subplot(111, projection='3d')
ax7.plot_surface(X, Y, w_y_star_mMOM, cmap='viridis')
ax7.set_title('mMOM of w')
ax7.set_xlabel('x')
ax7.set_ylabel('y')
ax7.set_zlabel('w_mMOM')

fig8 = plt.figure()
ax8 = fig8.add_subplot(111, projection='3d')
ax8.plot_surface(X, Y, w_y_star_CA, cmap='viridis')
ax8.set_title('CA of w')
ax8.set_xlabel('x')
ax8.set_ylabel('y')
ax8.set_zlabel('w_CA')

plt.show()
